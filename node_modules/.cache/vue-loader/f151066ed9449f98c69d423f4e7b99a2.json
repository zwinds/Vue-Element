{"remainingRequest":"/Users/zwind/Desktop/vue-element-admin-zwind/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zwind/Desktop/vue-element-admin-zwind/src/components/ImageCropper/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zwind/Desktop/vue-element-admin-zwind/src/components/ImageCropper/index.vue","mtime":1585556754667},{"path":"/Users/zwind/Desktop/vue-element-admin-zwind/node_modules/cache-loader/dist/cjs.js","mtime":1585556748495},{"path":"/Users/zwind/Desktop/vue-element-admin-zwind/node_modules/babel-loader/lib/index.js","mtime":1585556748275},{"path":"/Users/zwind/Desktop/vue-element-admin-zwind/node_modules/cache-loader/dist/cjs.js","mtime":1585556748495},{"path":"/Users/zwind/Desktop/vue-element-admin-zwind/node_modules/vue-loader/lib/index.js","mtime":1585556754247}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n'use strict'\nimport request from '@/utils/request'\nimport language from './utils/language.js'\nimport mimes from './utils/mimes.js'\nimport data2blob from './utils/data2blob.js'\nimport effectRipple from './utils/effectRipple.js'\nexport default {\n  props: {\n    // 域，上传文件name，触发事件会带上（如果一个页面多个图片上传控件，可以做区分\n    field: {\n      type: String,\n      default: 'avatar'\n    },\n    // 原名key，类似于id，触发事件会带上（如果一个页面多个图片上传控件，可以做区分\n    ki: {\n      type: Number,\n      default: 0\n    },\n    // 显示该控件与否\n    value: {\n      type: Boolean,\n      default: true\n    },\n    // 上传地址\n    url: {\n      type: String,\n      default: ''\n    },\n    // 其他要上传文件附带的数据，对象格式\n    params: {\n      type: Object,\n      default: null\n    },\n    // Add custom headers\n    headers: {\n      type: Object,\n      default: null\n    },\n    // 剪裁图片的宽\n    width: {\n      type: Number,\n      default: 200\n    },\n    // 剪裁图片的高\n    height: {\n      type: Number,\n      default: 200\n    },\n    // 不显示旋转功能\n    noRotate: {\n      type: Boolean,\n      default: true\n    },\n    // 不预览圆形图片\n    noCircle: {\n      type: Boolean,\n      default: false\n    },\n    // 不预览方形图片\n    noSquare: {\n      type: Boolean,\n      default: false\n    },\n    // 单文件大小限制\n    maxSize: {\n      type: Number,\n      default: 10240\n    },\n    // 语言类型\n    langType: {\n      type: String,\n      default: 'zh'\n    },\n    // 语言包\n    langExt: {\n      type: Object,\n      default: null\n    },\n    // 图片上传格式\n    imgFormat: {\n      type: String,\n      default: 'png'\n    },\n    // 是否支持跨域\n    withCredentials: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    const { imgFormat, langType, langExt, width, height } = this\n    let isSupported = true\n    const allowImgFormat = ['jpg', 'png']\n    const tempImgFormat =\n      allowImgFormat.indexOf(imgFormat) === -1 ? 'jpg' : imgFormat\n    const lang = language[langType] ? language[langType] : language['en']\n    const mime = mimes[tempImgFormat]\n    // 规范图片格式\n    this.imgFormat = tempImgFormat\n    if (langExt) {\n      Object.assign(lang, langExt)\n    }\n    if (typeof FormData !== 'function') {\n      isSupported = false\n    }\n    return {\n      // 图片的mime\n      mime,\n      // 语言包\n      lang,\n      // 浏览器是否支持该控件\n      isSupported,\n      // 浏览器是否支持触屏事件\n      isSupportTouch: document.hasOwnProperty('ontouchstart'),\n      // 步骤\n      step: 1, // 1选择文件 2剪裁 3上传\n      // 上传状态及进度\n      loading: 0, // 0未开始 1正在 2成功 3错误\n      progress: 0,\n      // 是否有错误及错误信息\n      hasError: false,\n      errorMsg: '',\n      // 需求图宽高比\n      ratio: width / height,\n      // 原图地址、生成图片地址\n      sourceImg: null,\n      sourceImgUrl: '',\n      createImgUrl: '',\n      // 原图片拖动事件初始值\n      sourceImgMouseDown: {\n        on: false,\n        mX: 0, // 鼠标按下的坐标\n        mY: 0,\n        x: 0, // scale原图坐标\n        y: 0\n      },\n      // 生成图片预览的容器大小\n      previewContainer: {\n        width: 100,\n        height: 100\n      },\n      // 原图容器宽高\n      sourceImgContainer: {\n        // sic\n        width: 240,\n        height: 184 // 如果生成图比例与此一致会出现bug，先改成特殊的格式吧，哈哈哈\n      },\n      // 原图展示属性\n      scale: {\n        zoomAddOn: false, // 按钮缩放事件开启\n        zoomSubOn: false, // 按钮缩放事件开启\n        range: 1, // 最大100\n        rotateLeft: false, // 按钮向左旋转事件开启\n        rotateRight: false, // 按钮向右旋转事件开启\n        degree: 0, // 旋转度数\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        maxWidth: 0,\n        maxHeight: 0,\n        minWidth: 0, // 最宽\n        minHeight: 0,\n        naturalWidth: 0, // 原宽\n        naturalHeight: 0\n      }\n    }\n  },\n  computed: {\n    // 进度条样式\n    progressStyle() {\n      const { progress } = this\n      return {\n        width: progress + '%'\n      }\n    },\n    // 原图样式\n    sourceImgStyle() {\n      const { scale, sourceImgMasking } = this\n      const top = scale.y + sourceImgMasking.y + 'px'\n      const left = scale.x + sourceImgMasking.x + 'px'\n      return {\n        top,\n        left,\n        width: scale.width + 'px',\n        height: scale.height + 'px',\n        transform: 'rotate(' + scale.degree + 'deg)', // 旋转时 左侧原始图旋转样式\n        '-ms-transform': 'rotate(' + scale.degree + 'deg)', // 兼容IE9\n        '-moz-transform': 'rotate(' + scale.degree + 'deg)', // 兼容FireFox\n        '-webkit-transform': 'rotate(' + scale.degree + 'deg)', // 兼容Safari 和 chrome\n        '-o-transform': 'rotate(' + scale.degree + 'deg)' // 兼容 Opera\n      }\n    },\n    // 原图蒙版属性\n    sourceImgMasking() {\n      const { width, height, ratio, sourceImgContainer } = this\n      const sic = sourceImgContainer\n      const sicRatio = sic.width / sic.height // 原图容器宽高比\n      let x = 0\n      let y = 0\n      let w = sic.width\n      let h = sic.height\n      let scale = 1\n      if (ratio < sicRatio) {\n        scale = sic.height / height\n        w = sic.height * ratio\n        x = (sic.width - w) / 2\n      }\n      if (ratio > sicRatio) {\n        scale = sic.width / width\n        h = sic.width / ratio\n        y = (sic.height - h) / 2\n      }\n      return {\n        scale, // 蒙版相对需求宽高的缩放\n        x,\n        y,\n        width: w,\n        height: h\n      }\n    },\n    // 原图遮罩样式\n    sourceImgShadeStyle() {\n      const { sourceImgMasking, sourceImgContainer } = this\n      const sic = sourceImgContainer\n      const sim = sourceImgMasking\n      const w =\n        sim.width === sic.width ? sim.width : (sic.width - sim.width) / 2\n      const h =\n        sim.height === sic.height ? sim.height : (sic.height - sim.height) / 2\n      return {\n        width: w + 'px',\n        height: h + 'px'\n      }\n    },\n    previewStyle() {\n      const { ratio, previewContainer } = this\n      const pc = previewContainer\n      let w = pc.width\n      let h = pc.height\n      const pcRatio = w / h\n      if (ratio < pcRatio) {\n        w = pc.height * ratio\n      }\n      if (ratio > pcRatio) {\n        h = pc.width / ratio\n      }\n      return {\n        width: w + 'px',\n        height: h + 'px'\n      }\n    }\n  },\n  watch: {\n    value(newValue) {\n      if (newValue && this.loading !== 1) {\n        this.reset()\n      }\n    }\n  },\n  created() {\n    // 绑定按键esc隐藏此插件事件\n    document.addEventListener('keyup', this.closeHandler)\n  },\n  destroyed() {\n    document.removeEventListener('keyup', this.closeHandler)\n  },\n  methods: {\n    // 点击波纹效果\n    ripple(e) {\n      effectRipple(e)\n    },\n    // 关闭控件\n    off() {\n      setTimeout(() => {\n        this.$emit('input', false)\n        this.$emit('close')\n        if (this.step === 3 && this.loading === 2) {\n          this.setStep(1)\n        }\n      }, 200)\n    },\n    // 设置步骤\n    setStep(no) {\n      // 延时是为了显示动画效果呢，哈哈哈\n      setTimeout(() => {\n        this.step = no\n      }, 200)\n    },\n    /* 图片选择区域函数绑定\n     ---------------------------------------------------------------*/\n    preventDefault(e) {\n      e.preventDefault()\n      return false\n    },\n    handleClick(e) {\n      if (this.loading !== 1) {\n        if (e.target !== this.$refs.fileinput) {\n          e.preventDefault()\n          if (document.activeElement !== this.$refs) {\n            this.$refs.fileinput.click()\n          }\n        }\n      }\n    },\n    handleChange(e) {\n      e.preventDefault()\n      if (this.loading !== 1) {\n        const files = e.target.files || e.dataTransfer.files\n        this.reset()\n        if (this.checkFile(files[0])) {\n          this.setSourceImg(files[0])\n        }\n      }\n    },\n    /* ---------------------------------------------------------------*/\n    // 检测选择的文件是否合适\n    checkFile(file) {\n      const { lang, maxSize } = this\n      // 仅限图片\n      if (file.type.indexOf('image') === -1) {\n        this.hasError = true\n        this.errorMsg = lang.error.onlyImg\n        return false\n      }\n      // 超出大小\n      if (file.size / 1024 > maxSize) {\n        this.hasError = true\n        this.errorMsg = lang.error.outOfSize + maxSize + 'kb'\n        return false\n      }\n      return true\n    },\n    // 重置控件\n    reset() {\n      this.loading = 0\n      this.hasError = false\n      this.errorMsg = ''\n      this.progress = 0\n    },\n    // 设置图片源\n    setSourceImg(file) {\n      const fr = new FileReader()\n      fr.onload = e => {\n        this.sourceImgUrl = fr.result\n        this.startCrop()\n      }\n      fr.readAsDataURL(file)\n    },\n    // 剪裁前准备工作\n    startCrop() {\n      const {\n        width,\n        height,\n        ratio,\n        scale,\n        sourceImgUrl,\n        sourceImgMasking,\n        lang\n      } = this\n      const sim = sourceImgMasking\n      const img = new Image()\n      img.src = sourceImgUrl\n      img.onload = () => {\n        const nWidth = img.naturalWidth\n        const nHeight = img.naturalHeight\n        const nRatio = nWidth / nHeight\n        let w = sim.width\n        let h = sim.height\n        let x = 0\n        let y = 0\n        // 图片像素不达标\n        if (nWidth < width || nHeight < height) {\n          this.hasError = true\n          this.errorMsg = lang.error.lowestPx + width + '*' + height\n          return false\n        }\n        if (ratio > nRatio) {\n          h = w / nRatio\n          y = (sim.height - h) / 2\n        }\n        if (ratio < nRatio) {\n          w = h * nRatio\n          x = (sim.width - w) / 2\n        }\n        scale.range = 0\n        scale.x = x\n        scale.y = y\n        scale.width = w\n        scale.height = h\n        scale.degree = 0\n        scale.minWidth = w\n        scale.minHeight = h\n        scale.maxWidth = nWidth * sim.scale\n        scale.maxHeight = nHeight * sim.scale\n        scale.naturalWidth = nWidth\n        scale.naturalHeight = nHeight\n        this.sourceImg = img\n        this.createImg()\n        this.setStep(2)\n      }\n    },\n    // 鼠标按下图片准备移动\n    imgStartMove(e) {\n      e.preventDefault()\n      // 支持触摸事件，则鼠标事件无效\n      if (this.isSupportTouch && !e.targetTouches) {\n        return false\n      }\n      const et = e.targetTouches ? e.targetTouches[0] : e\n      const { sourceImgMouseDown, scale } = this\n      const simd = sourceImgMouseDown\n      simd.mX = et.screenX\n      simd.mY = et.screenY\n      simd.x = scale.x\n      simd.y = scale.y\n      simd.on = true\n    },\n    // 鼠标按下状态下移动，图片移动\n    imgMove(e) {\n      e.preventDefault()\n      // 支持触摸事件，则鼠标事件无效\n      if (this.isSupportTouch && !e.targetTouches) {\n        return false\n      }\n      const et = e.targetTouches ? e.targetTouches[0] : e\n      const {\n        sourceImgMouseDown: { on, mX, mY, x, y },\n        scale,\n        sourceImgMasking\n      } = this\n      const sim = sourceImgMasking\n      const nX = et.screenX\n      const nY = et.screenY\n      const dX = nX - mX\n      const dY = nY - mY\n      let rX = x + dX\n      let rY = y + dY\n      if (!on) return\n      if (rX > 0) {\n        rX = 0\n      }\n      if (rY > 0) {\n        rY = 0\n      }\n      if (rX < sim.width - scale.width) {\n        rX = sim.width - scale.width\n      }\n      if (rY < sim.height - scale.height) {\n        rY = sim.height - scale.height\n      }\n      scale.x = rX\n      scale.y = rY\n    },\n    // 按钮按下开始向右旋转\n    startRotateRight(e) {\n      const { scale } = this\n      scale.rotateRight = true\n      const rotate = () => {\n        if (scale.rotateRight) {\n          const degree = ++scale.degree\n          this.createImg(degree)\n          setTimeout(function() {\n            rotate()\n          }, 60)\n        }\n      }\n      rotate()\n    },\n    // 按钮按下开始向左旋转\n    startRotateLeft(e) {\n      const { scale } = this\n      scale.rotateLeft = true\n      const rotate = () => {\n        if (scale.rotateLeft) {\n          const degree = --scale.degree\n          this.createImg(degree)\n          setTimeout(function() {\n            rotate()\n          }, 60)\n        }\n      }\n      rotate()\n    },\n    // 停止旋转\n    endRotate() {\n      const { scale } = this\n      scale.rotateLeft = false\n      scale.rotateRight = false\n    },\n    // 按钮按下开始放大\n    startZoomAdd(e) {\n      const { scale } = this\n      scale.zoomAddOn = true\n      const zoom = () => {\n        if (scale.zoomAddOn) {\n          const range = scale.range >= 100 ? 100 : ++scale.range\n          this.zoomImg(range)\n          setTimeout(function() {\n            zoom()\n          }, 60)\n        }\n      }\n      zoom()\n    },\n    // 按钮松开或移开取消放大\n    endZoomAdd(e) {\n      this.scale.zoomAddOn = false\n    },\n    // 按钮按下开始缩小\n    startZoomSub(e) {\n      const { scale } = this\n      scale.zoomSubOn = true\n      const zoom = () => {\n        if (scale.zoomSubOn) {\n          const range = scale.range <= 0 ? 0 : --scale.range\n          this.zoomImg(range)\n          setTimeout(function() {\n            zoom()\n          }, 60)\n        }\n      }\n      zoom()\n    },\n    // 按钮松开或移开取消缩小\n    endZoomSub(e) {\n      const { scale } = this\n      scale.zoomSubOn = false\n    },\n    zoomChange(e) {\n      this.zoomImg(e.target.value)\n    },\n    // 缩放原图\n    zoomImg(newRange) {\n      const { sourceImgMasking, scale } = this\n      const {\n        maxWidth,\n        maxHeight,\n        minWidth,\n        minHeight,\n        width,\n        height,\n        x,\n        y\n      } = scale\n      const sim = sourceImgMasking\n      // 蒙版宽高\n      const sWidth = sim.width\n      const sHeight = sim.height\n      // 新宽高\n      const nWidth = minWidth + ((maxWidth - minWidth) * newRange) / 100\n      const nHeight = minHeight + ((maxHeight - minHeight) * newRange) / 100\n      // 新坐标（根据蒙版中心点缩放）\n      let nX = sWidth / 2 - (nWidth / width) * (sWidth / 2 - x)\n      let nY = sHeight / 2 - (nHeight / height) * (sHeight / 2 - y)\n      // 判断新坐标是否超过蒙版限制\n      if (nX > 0) {\n        nX = 0\n      }\n      if (nY > 0) {\n        nY = 0\n      }\n      if (nX < sWidth - nWidth) {\n        nX = sWidth - nWidth\n      }\n      if (nY < sHeight - nHeight) {\n        nY = sHeight - nHeight\n      }\n      // 赋值处理\n      scale.x = nX\n      scale.y = nY\n      scale.width = nWidth\n      scale.height = nHeight\n      scale.range = newRange\n      setTimeout(() => {\n        if (scale.range === newRange) {\n          this.createImg()\n        }\n      }, 300)\n    },\n    // 生成需求图片\n    createImg(e) {\n      const {\n        mime,\n        sourceImg,\n        scale: { x, y, width, height, degree },\n        sourceImgMasking: { scale }\n      } = this\n      const canvas = this.$refs.canvas\n      const ctx = canvas.getContext('2d')\n      if (e) {\n        // 取消鼠标按下移动状态\n        this.sourceImgMouseDown.on = false\n      }\n      canvas.width = this.width\n      canvas.height = this.height\n      ctx.clearRect(0, 0, this.width, this.height)\n      // 将透明区域设置为白色底边\n      ctx.fillStyle = '#fff'\n      ctx.fillRect(0, 0, this.width, this.height)\n      ctx.translate(this.width * 0.5, this.height * 0.5)\n      ctx.rotate((Math.PI * degree) / 180)\n      ctx.translate(-this.width * 0.5, -this.height * 0.5)\n      ctx.drawImage(\n        sourceImg,\n        x / scale,\n        y / scale,\n        width / scale,\n        height / scale\n      )\n      this.createImgUrl = canvas.toDataURL(mime)\n    },\n    prepareUpload() {\n      const { url, createImgUrl, field, ki } = this\n      this.$emit('crop-success', createImgUrl, field, ki)\n      if (typeof url === 'string' && url) {\n        this.upload()\n      } else {\n        this.off()\n      }\n    },\n    // 上传图片\n    upload() {\n      const {\n        lang,\n        imgFormat,\n        mime,\n        url,\n        params,\n        field,\n        ki,\n        createImgUrl\n      } = this\n      const fmData = new FormData()\n      fmData.append(\n        field,\n        data2blob(createImgUrl, mime),\n        field + '.' + imgFormat\n      )\n      // 添加其他参数\n      if (typeof params === 'object' && params) {\n        Object.keys(params).forEach(k => {\n          fmData.append(k, params[k])\n        })\n      }\n      // 监听进度回调\n      // const uploadProgress = (event) => {\n      //   if (event.lengthComputable) {\n      //     this.progress = 100 * Math.round(event.loaded) / event.total\n      //   }\n      // }\n      // 上传文件\n      this.reset()\n      this.loading = 1\n      this.setStep(3)\n      request({\n        url,\n        method: 'post',\n        data: fmData\n      })\n        .then(resData => {\n          this.loading = 2\n          this.$emit('crop-upload-success', resData.data)\n        })\n        .catch(err => {\n          if (this.value) {\n            this.loading = 3\n            this.hasError = true\n            this.errorMsg = lang.fail\n            this.$emit('crop-upload-fail', err, field, ki)\n          }\n        })\n    },\n    closeHandler(e) {\n      if (this.value && (e.key === 'Escape' || e.keyCode === 27)) {\n        this.off()\n      }\n    }\n  }\n}\n",null]}